{"version":3,"sources":["InfoSection/index.jsx","scenes/Home/index.jsx","Header/index.jsx","scenes/MasterClass/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["memo","className","type","to","href","target","rel","path","exact","component","Home","MasterClass","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TA2BeA,G,MAAAA,eAvBK,kBAClB,oCACE,6BAASC,UAAU,gBACjB,wBAAIA,UAAU,sBAAd,iHAEE,6BAFF,iGAKA,wBAAIA,UAAU,6BAAd,mFACA,yBAAKA,UAAU,cACb,4BAAQC,KAAK,SAASD,UAAU,4BAC9B,0BAAMA,UAAU,2BAAhB,oJAIN,6BAASA,UAAU,gBACjB,kBAAC,IAAD,CAAME,GAAG,iBAAiBF,UAAU,sBAClC,wNCdOD,iBAJF,kBACT,kBAAC,EAAD,QCgBWA,G,MAAAA,eAhBA,kBACb,4BAAQC,UAAU,cAChB,kBAAC,IAAD,CAAME,GAAG,IAAIF,UAAU,oBACrB,wBAAIA,UAAU,oBAAd,iBAEF,uBACEA,UAAU,mBACVG,KAAK,wBACLC,OAAO,SACPC,IAAI,uBAJN,wBCDWN,iBANK,kBAChB,0BAAMC,UAAU,OACZ,4GCcOD,G,MAAAA,eAXH,kBACV,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAOM,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,iBAAiBE,UAAWE,SCD1BC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.124c93d0.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Link } from 'react-router-dom';\nimport './InfoSection.css';\n\nconst InfoSection = () => (\n  <>\n    <section className=\"dark-section\">\n      <h1 className=\"dark-section__text\">\n        Просто лучшая студия\n        <br />\n        Керамики в городе!\n      </h1>\n      <h2 className=\"dark-section__text m-t-30\">Но это не точно ...</h2>\n      <div className=\"centralize\">\n        <button type=\"button\" className=\"light-btn_primary m-t-50\">\n          <span className=\"light-btn__text_primary\">Записаться на мастер класс</span>\n        </button>\n      </div>\n    </section>\n    <section className=\"info-section\">\n      <Link to=\"/master-class/\" className=\"info-section__text\">\n        <h1>Узнать подробнее о мастер-классах</h1>\n      </Link>\n    </section>\n  </>\n);\n\nexport default memo(InfoSection);\n","import React, { memo } from \"react\";\nimport InfoSection from \"../../InfoSection\";\n\nconst Home = () => (\n    <InfoSection/>\n)\n\nexport default memo(Home);\n","import React, { memo } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\n\nconst Header = () => (\n  <header className=\"app-header\">\n    <Link to=\"/\" className=\"app-header__link\">\n      <h1 className=\"app-header__logo\">Organica Art</h1>\n    </Link>\n    <a\n      className=\"app-header__link\"\n      href=\"tel: +7 981 956-81-25\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      +7 981 956-81-25\n    </a>\n  </header>\n);\n\nexport default memo(Header);\n","import React, { memo } from \"react\" ;\n\nconst MasterClass = () => (\n    <main className=\"row\">\n        <h1>Мастер Классы</h1>\n    </main>\n)\n\nexport default memo(MasterClass);\n","import React, { memo } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './scenes/Home';\nimport Header from './Header';\nimport MasterClass from './scenes/MasterClass';\nimport './App.css';\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      <Header />\n\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/master-class/\" component={MasterClass} />\n    </div>\n  </Router>\n);\n\nexport default memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}